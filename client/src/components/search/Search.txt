// SearchPage.tsx
import React, { useState, useEffect } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import axios from '../../api/axios';
import { Search, Play, Pause } from 'lucide-react';
import MusicPlayer from '../../components/songplayer/Player';
import Sidebar from '../../components/sidebar/Sidebar';

interface Song {
  song_id: number;
  song_name: string;
  artist_name: string;
  album_name: string;
  duration: number;
  plays: number;
  album_id: string;
}

interface PlayerSong {
  id: string;
  title: string;
  artist: string;
  audioUrl: string;
  coverUrl?: string;
}

interface SearchResults {
  songs: Song[];
  artists: [];
}

const SearchPage: React.FC = () => {
  const [results, setResults] = useState<SearchResults>({ songs: [], artists: [] });
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [currentSong, setCurrentSong] = useState<Song | null>(null);
  const [currentSongIndex, setCurrentSongIndex] = useState<number>(-1);
  const [queue, setQueue] = useState<Song[]>([]);
  const [userId, setUserId] = useState<string>('');
  const [errMsg, setErrMsg] = useState<string | null>(null);
  const [key, setKey] = useState<number>(0);
  const [isPlaying, setIsPlaying] = useState(false);

  const searchKeyword = searchParams.get('keyword') || '';

  useEffect(() => {
    const fetchUserId = async () => {
      const userJson = localStorage.getItem('user');
      if (userJson) {
        const userData = JSON.parse(userJson);
        setUserId(userData.user_id);
      }
    };
    fetchUserId();
  }, []);

  const handleSearch = async () => {
    if (searchKeyword.trim() === '') {
      setResults({ songs: [], artists: [] });
      return;
    }

    const token = localStorage.getItem('token') || '';

    try {
      const response = await axios.get(`/songs/search`, {
        params: { keyword: searchKeyword },
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      const formattedSongs = Array.isArray(response.data) ? response.data.map((song: any) => ({
        song_id: song.song_id,
        song_name: song.song_name || 'Unknown Song',
        artist_name: song.artist_name || 'Unknown Artist',
        album_name: song.album_name || 'Unknown Album',
        duration: song.duration || 0,
        plays: song.plays || 0,
        album_id: song.album_id
      })) : [];

      setResults({
        songs: formattedSongs,
        artists: [],
      });
      setQueue(formattedSongs);
      setErrMsg(null);
    } catch (error: any) {
      console.error('Error performing search:', error);
      if (error.response?.status === 401) {
        setErrMsg('Unauthorized: Please log in again.');
        navigate('/login');
      } else {
        setErrMsg('Failed to fetch search results.');
      }
    }
  };

  useEffect(() => {
    handleSearch();
  }, [searchKeyword]);

  const convertToPlayerSong = (song: Song): PlayerSong => ({
    id: song.song_id.toString(),
    title: song.song_name,
    artist: song.artist_name,
    audioUrl: `/api/songs/${song.song_id}/stream`,
    coverUrl: song.album_id ? `/api/albums/${song.album_id}/cover` : undefined
  });

  const handleSongClick = (song: Song) => {
    if (currentSong?.song_id === song.song_id) {
      // Toggle play/pause if same song
      setIsPlaying(!isPlaying);
    } else {
      // Play new song
      const songIndex = queue.findIndex(s => s.song_id === song.song_id);
      setCurrentSongIndex(songIndex);
      setCurrentSong(song);
      setIsPlaying(true);
      setKey(prev => prev + 1);
    }
  };

  const handleNext = () => {
    if (currentSongIndex < queue.length - 1) {
      const nextIndex = currentSongIndex + 1;
      setCurrentSongIndex(nextIndex);
      setCurrentSong(queue[nextIndex]);
      setKey(prev => prev + 1);
    }
  };

  const handlePrevious = () => {
    if (currentSongIndex > 0) {
      const prevIndex = currentSongIndex - 1;
      setCurrentSongIndex(prevIndex);
      setCurrentSong(queue[prevIndex]);
      setKey(prev => prev + 1);
    }
  };

  const updateSearchParams = (keyword: string) => {
    const params = new URLSearchParams();
    params.set('keyword', keyword);
    navigate({ search: params.toString() });
  };

  const formatDuration = (duration: number | string | null) => {
    if (!duration) return '00:00';
    const totalSeconds = typeof duration === 'string' ? 
      parseInt(duration.split(':')[0]) * 60 + parseInt(duration.split(':')[1]) : 
      duration;
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = Math.floor(totalSeconds % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  return (
    <div className="bg-[#121212] text-[#EBE7CD] min-h-screen flex font-sans">
      <Sidebar />

      <div className="flex-1 flex flex-col p-8 overflow-y-auto pb-20">
        <div className="flex items-center mb-8">
          <div className="relative w-full max-w-2xl">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              value={searchKeyword}
              onChange={(e) => updateSearchParams(e.target.value)}
              placeholder="Search for Song or Artist"
              className="w-full bg-[#2A2A2A] rounded-full py-2 pl-10 pr-4 text-sm text-[#EBE7CD] focus:outline-none"
            />
          </div>
        </div>

        {searchKeyword && (
          <div>
            {results.songs.length > 0 ? (
              <div>
                <h3 className="text-xl font-semibold mb-3">Songs</h3>
                <div className="grid grid-cols-1 gap-2">
                  {results.songs.map((song) => (
                    <div
                      key={song.song_id}
                      className={`bg-[#2A2A2A] p-3 rounded-lg flex items-center hover:bg-[#3A3A3A] transition-colors cursor-pointer
                        ${currentSong?.song_id === song.song_id ? 'bg-[#3A3A3A]' : ''}`}
                      onClick={() => handleSongClick(song)}
                    >
                      {currentSong?.song_id === song.song_id && isPlaying ? (
                        <Pause className="w-4 h-4 mr-3 text-[#1ED760]" />
                      ) : (
                        <Play className={`w-4 h-4 mr-3 ${currentSong?.song_id === song.song_id ? 'text-[#1ED760]' : 'text-gray-400'}`} />
                      )}
                      <div className="flex-grow">
                        <p className={`font-semibold ${currentSong?.song_id === song.song_id ? 'text-[#1ED760]' : ''}`}>
                          {song.song_name}
                        </p>
                        <p className="text-sm text-gray-400">Artist: {song.artist_name}</p>
                        <p className="text-sm text-gray-400">Album: {song.album_name}</p>
                      </div>
                      <p className="text-sm text-gray-400">{formatDuration(song.duration)}</p>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <p className="text-center text-gray-400">No results found</p>
            )}
          </div>
        )}
      </div>

      {currentSong && (
        <MusicPlayer
          currentSong={{
            id: currentSong.song_id.toString(),
            title: currentSong.song_name,
            artist: currentSong.artist_name,
            audioUrl: `/api/songs/${currentSong.song_id}/stream`,
            coverUrl: currentSong.album_id ? `/api/albums/${currentSong.album_id}/cover` : undefined
          }}
          userId={userId}
        />
      )}
    </div>
  );
};

export default SearchPage;